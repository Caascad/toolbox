#!/usr/bin/env bash

set -eu
set -o pipefail

DIR=$1
shift
COMMAND=$1
shift

ENTRYPOINT=$DIR/default.nix
BASH_COMPL_SCRIPT=$DIR/scripts/toolbox.complete.bash.sh
source $DIR/scripts/utils.sh

list() {
    paste -d' ' <(echo -e $(nix-instantiate $DIR/lib.nix -A list --eval --strict | tr -d "\"") | column -t -R 2) <(nix-env -f $ENTRYPOINT -q -a -c --no-name --description) | grep --color -E '^|>|<'
}

install() {
    local pkg="$1"
    log-run "nix-env -f $ENTRYPOINT -iA $pkg"
}

uninstall() {
    local pkg="$1"
    log-run "nix-env -e $pkg"
}

update() {
    log "Updating toolbox ..."
    pushd $DIR 2>&1 >/dev/null
    if [[ ! $(git rev-parse --abbrev-ref HEAD) == "master" ]]; then
      log-error "I am not on the master branch. Aborting"
      exit 1
    fi
    log-run "git fetch origin"
    if [[ $(git rev-parse origin/master) == $(git rev-parse HEAD) ]]; then
      log "Already up-to-date!"
    else
      log-run "git pull origin master"
    fi
    log-run "nix-env -f $ENTRYPOINT -u -b"
    popd 2>&1 >/dev/null
}

doctor() {
    OK="\e[32mOK\e[0m"
    X="\e[31mX\e[0m"
    FAIL=""

    log "Running sanity checks:\n"

    if _isNixInstalled
    then
        echo -e "- Nix installed :  $OK"
    else
        echo -e "- Nix installed :  $X"
        FAIL="."
    fi

    if _isSubstituterConfigured
    then
        echo -e "- toolbox binary cache: $OK"
    else
        echo -e "- toolbox binary cache: $X"
        FAIL="."
    fi

    if [[ $FAIL = "" ]]; then
        echo -e "\nAll essential tests passed."
    else
        echo -e "\nSome tests failed. Try running the init command:\n"
        echo -e "  ./toolbox init\n"
        echo -e "Check the 'Manual Configuration' section of the README.md if you continue to experience problems."
        exit 1
    fi
}

shell() {
    set -ue
    set -o pipefail
    sha=$(git -C $DIR rev-parse origin/master)
    log "Using commit $sha for this shell"
    url="https://git.corp.cloudwatt.com/api/v4/projects/jpbraun%2Ftoolbox/repository/archive?sha=$sha"
    log "Calculating sha256 for $url"
    sha256=$(nix-prefetch-url --unpack $url 2>/dev/null)
    cat <<EOF > shell.nix
# Generated by toolbox shell
let
  toolbox = import (builtins.fetchTarball {
    url = "$url";
    sha256 = "$sha256";
  }) {};
  pkgs = import <nixpkgs> {};
in
  pkgs.runCommand "deps" {
    buildInputs = with toolbox; [
      ${@}
    ];
  } ""
EOF
    cat <<EOF > .envrc
use_nix
EOF

    direnv allow
}

register-completions() {
    cat <<EOF
ENTRYPOINT="$ENTRYPOINT"
EOF
    cat $BASH_COMPL_SCRIPT
}

case "$COMMAND" in
    list)
        list "$@"
        ;;
    install)
        check_args $# 1 "install"
        install "$@"
        ;;
    uninstall)
        check_args $# 1 "uninstall"
        uninstall $(_get_name "$@")
        ;;
    update)
        update "$@"
        ;;
    shell)
        shell "$@"
        ;;
    doctor)
        doctor
        ;;
    completions)
        register-completions
        ;;
    *)
        echo "Error: unknown command: $COMMAND"
        usage
        exit 1
esac
