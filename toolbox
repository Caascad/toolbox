#!/usr/bin/env bash
# shellcheck disable=SC1117

set -e
set -o pipefail

BASH_COMPL_SCRIPT=./scripts/toolbox.complete.bash.sh
NIX_INSTALL_URL="${NIX_INSTALL_URL:-https://nixos.org/nix/install}"


log() {
    local args="$*"
    local PLEASE="\e[32m[toolbox]:\e[0m"
    echo -e "$PLEASE $args"
}

log-error() {
    local args="$*"
    local PLEASE="\e[31m[toolbox]\e[0m"
    echo -e "$PLEASE $args"
}

log-run() {
    local cmd="$1"
    log "Running \"$cmd\"\n"
    eval $cmd
}


_list_attrs() {
    nix-instantiate --strict --eval --expr "builtins.attrNames (import ./default.nix {})" | tr -d "[]\"" | sed 's/^[[:space:]]*//g' | sed 's/[[:space:]]*$//g'
}

_get_name() {
    local pkg="$1"
    nix-instantiate --strict --eval --expr "(import ./default.nix {}).$1.name" | tr -d '"'
}


#
# sanity check functions
#

_isRegularUser() {
    test $(id -u) -ne 0
}

_hasKvmSupport() {
    test -c /dev/kvm && test -w /dev/kvm && test -r /dev/kvm
}

_isNixInstalled() {
    nix --version >/dev/null 2>&1
}

_sourceNix() {
    NIX_SH="$HOME/.nix-profile/etc/profile.d/nix.sh"
    test -f "$NIX_SH" && source "$NIX_SH" || true
}

_addCacheConfig() {
    if test -f ~/.config/nix/nix.conf
    then
        log "$HOME/.config/nix/nix.conf exists. Please follow the instructions from the README"
    else
        mkdir -p "$HOME"/.config/nix/
        cat << EOF > "$HOME"/.config/nix/nix.conf
substituters = https://cache.nixos.org  https://cache.nix.corp.cloudwatt.com
trusted-substituters = https://cache.nix.corp.cloudwatt.com
trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= cache.nix.cloudwatt.com:ApPt6XtZeOQ3hNRTSBQx+m6rd8p04G0DQwz0bZfVPL8=
EOF
    fi
}

check_args() {
    local actual="$1"
    local expected="$2"
    local cmd="$3"

    if [ "$actual" -ne "$expected" ]; then
        log-error "'$cmd' requires $expected arguments but $actual were given"
        exit 1
    fi
}

#
# subcommands
#

register-completions() {
    cat "$BASH_COMPL_SCRIPT"
}

build() {
    local pkg="$1"
    log-run "nix build -f default.nix $pkg"

    if [ $? -eq 0 ]; then
        echo ""
        log "Your build result is symlinked in ./result"
    fi
}

install() {
    local pkg="$1"
    log-run "nix-env -f default.nix -iA $pkg"
}

uninstall() {
    local pkg="$1"
    log-run "nix-env -e $pkg"
}

shell() {
    local pkg="$1"
    log-run "nix-shell default.nix -A $pkg"
}

init() {
    log "Initializing setup ..."

    if _isNixInstalled ; then
        log "Looks like nix is already installed"
    else
        log "Looks like nix is not installed yet"
        log "Running 'curl https://nixos.org/nix/install | sh'"
        curl "$NIX_INSTALL_URL" | sh
        _sourceNix
    fi

}

doctor() {
    OK="\e[32mOK\e[0m"
    X="\e[31mX\e[0m"
    FAIL=""

    log "Running sanity checks:\n"

    if _isNixInstalled
    then
        echo -e "- Nix installed :  $OK"
    else
        echo -e "- Nix installed :  $X"
        FAIL="."
    fi

    if _hasKvmSupport
    then
        echo -e "- kvm support: $OK"
    else
        echo -e "- kvm support: '/dev/kvm' either not found or you don't have r/w permissions. You probably won't be able to start VMs"
    fi

    if [[ $FAIL = "" ]]; then
        echo -e "\nAll essential tests passed."
    else
        echo -e "\nSome tests failed. Try running the init command:\n"
        echo -e "  ./toolbox init\n"
        echo -e "Check the 'Manual Configuration' section of the README.md if you continue to experience problems."
        exit 1
    fi
}

list() {
    local args="$*"

    if [ -z "$args" ]; then
        _list_attrs | tr " " "\n"
    else
        _list_attrs | tr " " "\n" | grep "$args"
    fi
}

usage() {
cat <<EOM
Usage: toolbox <command> [args]

 init                 -- configure initial setup
 doctor               -- perform sanity checks
 list                 -- list artifacts and tests
 install [artifact]   -- install an artifact
 uninstall [artifact] -- uninstall a previously installed artifact
 build [artifact]     -- build an artifact
 shell [artifact]     -- enter a dev shell for an artifact
 completions          -- output completion script

In order to enable context-sensitive completions (bash only!) run:

  $ source <(./toolbox completions)

You should add this to your init scripts.
EOM
}

if ! _isRegularUser; then
    log-error "root user detected. Run ./toolbox as non-root user!"
    exit 1
fi

if [ -z "$1" ]; then
    usage
    exit 1
fi

_sourceNix
_isNixInstalled

subcommand="$1"
shift

case "$subcommand" in
    build)
        check_args $# 1 "build"
        build "$@"
        ;;
    install)
        check_args $# 1 "install"
        install "$@"
        ;;
    uninstall)
        check_args $# 1 "uninstall"
        uninstall $(_get_name "$@")
        ;;
    shell)
        check_args $# 1 "shell"
        shell "$@"
        ;;
    init)
        init "$@"
        ;;
    list)
        list "$@"
        ;;
    doctor)
        doctor
        ;;
    completions)
        register-completions
        ;;
    *)
        echo "Error: unknown command: $subcommand"
        usage
        exit 1
esac
